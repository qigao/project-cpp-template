name: Ubuntu
env:
  CCACHE_VERSION: 4.6
on:
  push:
    branches:
      - master
    paths:
      - "project/**"
      - ".github/workflows/ubuntu.yml"
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - "project/**"
      - ".github/workflows/ubuntu.yml"

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        qt_ver: [6.2.3]
        qt_arch: [gcc_64]
        qt_target: [desktop]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install Python environment
        uses: actions/setup-python@v2
      - name: Run Clang-Format
        run: python ./run-clang-format.py -r project
      - name: Download ccache
        id: ccache
        shell: cmake -P {0}
        run: |
          set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
          file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)

      - name: ubuntu install GL library
        run: |
          sudo apt-get update
          sudo apt-get install -y libglew-dev libglfw3-dev ninja-build
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          target: ${{ matrix.qt_target }}
      - name: Install conan
        run: |
          pip install conan --upgrade
          conan profile new default --detect
          conan profile update settings.compiler.libcxx=libstdc++11 default
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ubuntu-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ubuntu-ccache-
      - name: Cmake Configure
        run: |
          cmake -S . \
          -B build \
          -DBUILD_TESTING=TRUE \
          -DBUILD_SHARED_LIBS=TRUE \
          -DCMAKE_BUILD_TYPE=Release \
          -G Ninja \
          -D CMAKE_C_COMPILER_LAUNCHER=ccache \
          -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }}
      - name: Cache Env
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          set(ENV{CCACHE_COMPRESS} "true")
          set(ENV{CCACHE_COMPRESSLEVEL} "6")
          set(ENV{CCACHE_MAXSIZE} "400M")
      - name: Cmake Build
          cmake --build build --target install --config Release
      - name: ccache statistics
        shell: cmake -P {0}
        run: |
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
          set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
          set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
          execute_process(COMMAND ccache -s)
      - name: Install Strip
        run: cmake --install build --prefix instdir --strip
      - name: Pack
        working-directory: instdir
        run: cmake -E tar cfv ../linux.7z --format=7zip .
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./linux.7z
          name: linux.7z
