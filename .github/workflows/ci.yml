name: ci-linux
on:
  push:
    branches:
      - main
      - develop
      - master
    paths:
      - "core/**" 

  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - "core/**" 
env:
  CMAKE_GENERATOR: "Ninja Multi-Config"
jobs:
  setup-build:
    strategy:
        matrix:
          include:
            - os: ubuntu-latest
              compiler: "gcc"
            - os: ubuntu-latest
              compiler: "clang"  
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./vcpkg.json')}}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('./vcpkg.json') }}-
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
            vcpkgDirectory: '${{ github.workspace }}/vcpkg'
            vcpkgJsonGlob: '**/vcpkg.json'
      - name: Install Conan 2
        run: |
                pip install conan
                conan --version
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
            version: 3.x
            repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install tools (Unix)
        if: ${{  contains(matrix.os, 'ubuntu')  }}
        run: |
            sudo apt-get update
            sudo apt-get install -y ccache cppcheck clang-tidy
            pip install gcovr 
      - name: Install CMake and Ninja
        uses: lukka/get-cmake@latest  
      - name: config and setup project
        run: |
            task config
      - name: build all the project
        run: |
            task build.all
      - name: Test
        run: |
            task test.all
    #   - name: Test/Coverage
    #     run: |
    #         task coverage.all
    #   - name: Publish Tagged Release
    #     uses: softprops/action-gh-release@v2
    #     if: ${{ startsWith(github.ref, 'refs/tags/')  }}
    #     with:
    #         files: |
    #           build/*-*Release*-*.*
    #   - name: Publish to codecov
    #     uses: codecov/codecov-action@v4.0.1
    #     with:
    #         flags: ${{ runner.os }}
    #         name: ${{ runner.os }}-coverage
    #         files: ./build/coverage.xml
    #         token: ${{ secrets.CODECOV_TOKEN  }}
