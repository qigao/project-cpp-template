version: 3
includes:
  core:
    taskfile: ./core/Taskfile.yml
dotenv: ['.env', 'task_vars.env']
env:
  BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
  BUILD_TYPE: '{{ .CMAKE_BUILD_TYPE }}'
  OUTPUT_DIR: '{{.CNMAKE_OUTPUT_DIR}}'

tasks:
  lint:clang-format:
    cmds:
      - cmd: powershell -c '$files=(git ls-files --exclude-standard); foreach ($file in $files) { if ((get-item $file).Extension -in ".cpp", ".hpp", ".c", ".cc", ".cxx", ".hxx", ".ixx") { clang-format -i -style=file $file } }'
        platforms: [windows]
      - cmd: git ls-files --exclude-standard | grep -E '\.(cpp|hpp|c|cc|cxx|hxx|ixx)$' | xargs clang-format -i -style=file
        platforms: [linux, darwin]
  lint:cmake:
    cmds:
      - cmd: powershell -c '$files=(git ls-files --exclude-standard); foreach ($file in $files) { $item=(get-item $file); if (($item.Name -eq "CMakeLists.txt") -or ($item.Extension -in ".cmake")) { cmake-format --in-place $file; cmake-lint $file {{.CMAKE_LINT_FLAGS}} } }'
        platforms: [windows]
      - cmd: git ls-files --exclude-standard | grep -E '(CMakeLists\.txt)|(\.(cmake))$' | xargs cmake-format --in-place | xargs cmake-lint {{.CMAKE_LINT_FLAGS}}
        platforms: [linux, darwin]
    vars:
      CMAKE_LINT_FLAGS: --disabled-codes C0103 C0301 R0912 R0915 R0913 --suppress-decorations
  # Run with coverage analysis
  coverage.all:
    cmds:
      # Set --sources "your_source_folder\*" and --filter "your_source_folder/" to have a clean coverage report
      - |
        {{if eq OS "windows"}}

          OpenCppCoverage.exe --export_type html:./build/coverage --export_type cobertura:./build/coverage.xml --cover_children --sources "core\*" --modules "build\*" -- task test.all

          powershell -c "if (!\$env:CI) { echo '[info] Opening ./build/coverage/index.html...'; start ./build/coverage/index.html }"
        {{else}}
           mkdir -p ./build/coverage/

         gcovr -r . -e '/.*/build/'  -e '/.*/test/'   --html --html-details -o build/coverage/index.html --xml-pretty --xml build/coverage.xml

          echo "Open ./build/coverage/index.html in a browser for a visual coverage report"
        {{end}}
  lint.all:
    desc: cpp, cmake, and vcpkg linting
    deps:
      - task: lint:cmake
      - task: lint:clang-format

  clean:build:
    desc: clean all build artifacts
    cmds:
      - cmd: powershell -c 'function rmrf($path) { if (test-path $path) { rm -r -force $path }}; rmrf ./build; rmrf ./install'
        platforms: [windows]
      - cmd: rm -rf ./build && rm -fr CMakeUserPresets.json && rm -fr task_vars.env
        platforms: [linux, darwin]
  clean.all:
    desc: clean all build artifacts and packages
    deps:
      - task: clean:build
  test.all:
    desc: all the test tasks from modules
    cmds:
      - ctest --preset $CONFIG
  template:config:
    desc: template for cmake project config
    cmds:
      - cmake -S ./ -B ./build/ -G '{{.CMAKE_GENERATOR | default "Ninja Multi-Config"}}' -DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake -DBUILD_SHARED_LIBS:BOOL={{.SHARED_LIBS}} -DENABLE_OPENSSL:BOOL={{.ENABLE_OPENSSL}} -DCMAKE_BUILD_TYPE:STRING={{.CMAKE_BUILD_TYPE}} -DFEATURE_TESTS:BOOL={{.FEATURE_TESTS}} -DFEATURE_DOCS:BOOL='{{.FEATURE_DOCS | default "OFF"}}' {{.CONFIGURE_FLAGS}}
  template:build:
    desc: build all the targets by presets
    cmds:
      - cmake --build ./build  --config {{.CMAKE_BUILD_TYPE}}
  conan:init:
    desc: create default conan profile
    cmds:
      - conan profile detect
  conan:libs:
     desc: install external libs
     cmds:
       - conan install conan/libs/libs.txt --profile conan/profiles/{{.PROFILE}} -b missing -s build_type=Release -of .
  conan:test:
     desc: install external libs
     cmds:
       - conan install conan/libs/test.txt --profile conan/profiles/{{.PROFILE}} -b missing -s build_type=Release -of .
  config.all:
     desc: prepare and install conan managed packages
     cmds:
      - task: conan:libs
      - task: conan:test
      - task: template:config
  build.all:
      desc: build all
      cmds:
        - task: template:build

  default:
    desc: list all tasks
    cmds:
      - task -a
